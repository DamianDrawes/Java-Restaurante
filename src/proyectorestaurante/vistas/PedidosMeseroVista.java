/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectorestaurante.vistas;

import java.sql.Date;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import proyectorestaurante.AccesoAdatos.MeseroData;
import proyectorestaurante.AccesoAdatos.PedidoData;
import proyectorestaurante.AccesoAdatos.ProductoData;
import proyectorestaurante.entidades.Mesero;
import proyectorestaurante.entidades.Pedido;
import proyectorestaurante.entidades.Producto;

/**
 *
 * @author pc
 */
public class PedidosMeseroVista extends javax.swing.JInternalFrame {

    private DefaultTableModel modelo1 = new DefaultTableModel() {
        public boolean isCellEditable(int fila, int columna) {
            return false;
        }
    };
    private DefaultTableModel modelo2 = new DefaultTableModel() {
        public boolean isCellEditable(int fila, int columna) {
            return false;
        }
    };
    /**
     * Creates new form PedidosMeseroVista
     */
    private Mesero mesero = new Mesero();
    private MeseroData meseroData = new MeseroData();
    private PedidoData pedidoData = new PedidoData();
    private ProductoData productoData = new ProductoData();
    private ArrayList<Mesero> listaMesero;
    private ArrayList<Pedido> listaPedido;

    public PedidosMeseroVista() {
        initComponents();
        jCfecha.setDate(Date.valueOf(LocalDate.now()));
        armarCabecera1();
        armarCabecera2();
        cargarCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        combo = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jCfecha = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaFecha = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablaAtendido = new javax.swing.JTable();
        buscar = new javax.swing.JButton();

        jLabel4.setText("jLabel4");

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("Pedido de un Mesero");

        jLabel1.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Mesero");

        combo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Fecha");

        jLabel3.setFont(new java.awt.Font("Courier New", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Pedidos atendidos");

        jLabel5.setFont(new java.awt.Font("Courier New", 1, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Pedidos cobrados");

        tablaFecha.setBackground(new java.awt.Color(255, 153, 102));
        tablaFecha.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        tablaFecha.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaFecha);

        tablaAtendido.setBackground(new java.awt.Color(255, 255, 255));
        tablaAtendido.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        tablaAtendido.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(tablaAtendido);

        buscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectorestaurante/recursos/lupa_1.png"))); // NOI18N
        buscar.setText("Buscar");
        buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(181, 181, 181)
                        .addComponent(jLabel5))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(159, 159, 159)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jCfecha, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buscar))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(148, 148, 148)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(21, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(215, 215, 215)
                .addComponent(jLabel3)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jCfecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2))
                    .addComponent(buscar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboActionPerformed
        // TODO add your handling code here:
        mesero = (Mesero) combo.getSelectedItem();
        borrarFilas1();
        borrarFilas2();
        armarTablaPediente();
    }//GEN-LAST:event_comboActionPerformed

    private void buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarActionPerformed
        // TODO add your handling code here:
        try {
        mesero = (Mesero) combo.getSelectedItem();
        if (mesero != null) {
            LocalDate fechaPedido = jCfecha.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            if (fechaPedido != null) {
                borrarFilas2();
                armarTablaFecha(fechaPedido);
            } else {
                JOptionPane.showMessageDialog(this, "Seleccione una fecha.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione un mesero.");
        }
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, "Error al buscar pedidos: " + ex.getMessage());
    }
    }//GEN-LAST:event_buscarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buscar;
    private javax.swing.JComboBox<Mesero> combo;
    private com.toedter.calendar.JDateChooser jCfecha;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable tablaAtendido;
    private javax.swing.JTable tablaFecha;
    // End of variables declaration//GEN-END:variables
    private void cargarCombo() {
        listaMesero = (ArrayList<Mesero>) meseroData.listarMeseros();
        for (Mesero m : listaMesero) {
            combo.addItem(m);
        }
    }

    private void armarCabecera1() {
        ArrayList<Object> columnas = new ArrayList<>();
        modelo1.addColumn("Id Pedido");
        modelo1.addColumn("Id Mesa");
        modelo1.addColumn("Producto");
        modelo1.addColumn("Cantidad");
        modelo1.addColumn("Precio unidad");
        modelo1.addColumn("Total");
        modelo1.addColumn("Estado");
        tablaAtendido.setModel(modelo1);
    }

    private void armarCabecera2() {
        ArrayList<Object> columnas = new ArrayList<>();
        modelo2.addColumn("Id Pedido");
        modelo2.addColumn("Id Mesa");
        modelo2.addColumn("Producto");
        modelo2.addColumn("Cantidad");
        modelo2.addColumn("Precio unidad");
        modelo2.addColumn("Total");
        modelo2.addColumn("Estado");
        tablaFecha.setModel(modelo2);
    }

    private void borrarFilas1() {
        int filas = tablaAtendido.getRowCount() - 1;
        for (int f = filas; f >= 0; f--) {
            modelo1.removeRow(f);
        }
    }

    private void borrarFilas2() {
        int filas = tablaFecha.getRowCount() - 1;
        for (int f = filas; f >= 0; f--) {
            modelo2.removeRow(f);
        }
    }

    private String Estado(Pedido pedido) {
        String estado;
        if (pedido.isEstado() == true) {
            if (pedido.isEstadoPago() == true) {
                estado = "Pago";
            } else {
                estado = "Entregado";
            }
        } else {
            estado = "Pendiente";
        }
        return estado;
    }

    private void armarTablaPediente() {
        listaPedido = (ArrayList<Pedido>) pedidoData.BuscarPedidosxMesero(mesero.getIdMesero());
        for (Pedido pedido : listaPedido) {
            Producto producto = productoData.buscarProductoporId(pedido.getIdProducto());
            String nombre = producto.getNombreProducto();
            int precio = producto.getPrecio();
            modelo1.addRow(new Object[]{pedido.getIdPedido(), pedido.getIdMesa(), nombre, pedido.getCantidadProducto(), precio, pedido.getCantidadProducto() * precio, Estado(pedido)});
        }
    }

    private void armarTablaFecha(LocalDate dia) {
        listaPedido = (ArrayList<Pedido>) pedidoData.BuscarPedidosxFecha(dia, mesero);
        for (Pedido pedido : listaPedido) {
            Producto producto = productoData.buscarProductoporId(pedido.getIdProducto());
            String nombre = producto.getNombreProducto();
            int precio = producto.getPrecio();
            modelo2.addRow(new Object[]{pedido.getIdPedido(), pedido.getIdMesa(), nombre, pedido.getCantidadProducto(), precio, pedido.getCantidadProducto() * precio, Estado(pedido)});
        }
    }
}
